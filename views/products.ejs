<%- include('partials/head', { title }) %>

<h1 class="text-2xl font-semibold mb-4">Products</h1>

<div class="bg-white border rounded-lg p-4 mb-6">
  <div class="grid md:grid-cols-5 gap-3 items-end">
    <div>
      <label class="label">Search</label>
      <input id="search" type="text" class="input" placeholder="name or description" />
    </div>
    <div>
      <label class="label">Category</label>
      <select id="filterCategory" class="input"></select>
    </div>
    <div>
      <label class="label">Vendor</label>
      <select id="filterVendor" class="input"></select>
    </div>
    <div class="grid grid-cols-2 gap-2">
      <div>
        <label class="label">Min Price</label>
        <input id="minPrice" type="number" step="0.01" class="input" />
      </div>
      <div>
        <label class="label">Max Price</label>
        <input id="maxPrice" type="number" step="0.01" class="input" />
      </div>
    </div>
    <div>
      <label class="label">Sort</label>
      <select id="sort" class="input">
        <option value="created_desc">Newest</option>
        <option value="created_asc">Oldest</option>
        <option value="price_asc">Price Asc</option>
        <option value="price_desc">Price Desc</option>
      </select>
    </div>
  </div>
  <div class="mt-3 flex gap-2">
    <button id="applyFilters" class="btn-primary">Apply</button>
    <button id="resetFilters" class="btn">Reset</button>
  </div>
</div>

<div class="bg-white border rounded-lg p-4 mb-6">
  <h2 class="font-semibold mb-3">Add Product</h2>
  <div class="grid md:grid-cols-3 gap-3">
    <input id="newName" class="input" placeholder="Name" />
    <input id="newPrice" class="input" placeholder="Price" type="number" step="0.01" />
    <input id="newStock" class="input" placeholder="Stock" type="number" />
    <input id="newDesc" class="input md:col-span-3" placeholder="Description" />
    <select id="newVendor" class="input"></select>
    <select id="newCategories" class="input" multiple></select>
  </div>
  <div class="mt-3">
    <button id="createProduct" class="btn-primary">Create</button>
  </div>
</div>

<div class="bg-white border rounded-lg">
  <table class="min-w-full">
    <thead class="bg-gray-100 text-sm">
      <tr>
        <th class="th">Name</th>
        <th class="th">Vendor</th>
        <th class="th">Categories</th>
        <th class="th">Price</th>
        <th class="th">Stock</th>
        <th class="th">Actions</th>
      </tr>
    </thead>
    <tbody id="productsBody" class="text-sm"></tbody>
  </table>
</div>

<script>
  const api = {
    products: '/api/products',
    categories: '/api/categories',
    vendors: '/api/vendors'
  };

  const els = {
    search: document.getElementById('search'),
    filterCategory: document.getElementById('filterCategory'),
    filterVendor: document.getElementById('filterVendor'),
    minPrice: document.getElementById('minPrice'),
    maxPrice: document.getElementById('maxPrice'),
    sort: document.getElementById('sort'),
    applyFilters: document.getElementById('applyFilters'),
    resetFilters: document.getElementById('resetFilters'),
    productsBody: document.getElementById('productsBody'),
    newName: document.getElementById('newName'),
    newPrice: document.getElementById('newPrice'),
    newStock: document.getElementById('newStock'),
    newDesc: document.getElementById('newDesc'),
    newVendor: document.getElementById('newVendor'),
    newCategories: document.getElementById('newCategories'),
    createProduct: document.getElementById('createProduct'),
  };

  async function loadCategoriesAndVendors() {
    const [cats, vends] = await Promise.all([
      fetch(api.categories).then(r => r.json()),
      fetch(api.vendors).then(r => r.json())
    ]);

    // Filter selects
    els.filterCategory.innerHTML = '<option value="">All</option>' + cats.map(c => `<option value="${c.id}">${c.name}</option>`).join('');
    els.filterVendor.innerHTML = '<option value="">All</option>' + vends.map(v => `<option value="${v.id}">${v.name}</option>`).join('');

    // Create form selects
    els.newVendor.innerHTML = vends.map(v => `<option value="${v.id}">${v.name}</option>`).join('');
    els.newCategories.innerHTML = cats.map(c => `<option value="${c.id}">${c.name}</option>`).join('');
  }

  function paramsFromFilters() {
    const p = new URLSearchParams();
    if (els.search.value) p.set('search', els.search.value);
    if (els.filterCategory.value) p.set('category_id', els.filterCategory.value);
    if (els.filterVendor.value) p.set('vendor_id', els.filterVendor.value);
    if (els.minPrice.value) p.set('min_price', els.minPrice.value);
    if (els.maxPrice.value) p.set('max_price', els.maxPrice.value);
    if (els.sort.value) p.set('sort', els.sort.value);
    return p.toString();
  }

  async function loadProducts() {
    const qs = paramsFromFilters();
    const url = qs ? `${api.products}?${qs}` : api.products;
    const rows = await fetch(url).then(r => r.json());
    els.productsBody.innerHTML = rows.map(row => {
      return `
        <tr class="border-t">
          <td class="td">${row.name}</td>
          <td class="td">${row.vendor_name}</td>
          <td class="td">${row.category_names || ''}</td>
          <td class="td">$${Number(row.price).toFixed(2)}</td>
          <td class="td">${row.stock}</td>
          <td class="td">
            <button class="btn" onclick="editProduct(${row.id})">Edit</button>
            <button class="btn-danger" onclick="deleteProduct(${row.id})">Delete</button>
          </td>
        </tr>
      `;
    }).join('');
  }

  async function deleteProduct(id) {
    if (!confirm('Delete product?')) return;
    const r = await fetch(`${api.products}/${id}`, { method: 'DELETE' });
    if (r.ok) loadProducts();
    else alert('Failed to delete');
  }

  async function editProduct(id) {
    const row = await fetch(`${api.products}/${id}`).then(r => r.json());
    els.newName.value = row.name;
    els.newPrice.value = row.price;
    els.newStock.value = row.stock;
    els.newDesc.value = row.description || '';
    els.newVendor.value = row.vendor_id;
    [...els.newCategories.options].forEach(o => o.selected = !!row.categories.find(c => c.id === Number(o.value)));
    els.createProduct.textContent = 'Save Changes';
    els.createProduct.onclick = async () => {
      const payload = collectPayload();
      const r = await fetch(`${api.products}/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      if (r.ok) {
        resetCreateForm();
        await loadProducts();
      } else alert('Update failed');
    };
  }

  function collectPayload() {
    const selectedCatIds = [...els.newCategories.selectedOptions].map(o => Number(o.value));
    return {
      name: els.newName.value,
      price: Number(els.newPrice.value),
      stock: Number(els.newStock.value || 0),
      description: els.newDesc.value,
      vendor_id: Number(els.newVendor.value),
      category_ids: selectedCatIds
    };
  }

  function resetCreateForm() {
    els.createProduct.textContent = 'Create';
    els.createProduct.onclick = onCreateProduct;
    els.newName.value = '';
    els.newPrice.value = '';
    els.newStock.value = '';
    els.newDesc.value = '';
    els.newVendor.selectedIndex = 0;
    [...els.newCategories.options].forEach(o => o.selected = false);
  }

  async function onCreateProduct() {
    const payload = collectPayload();
    const r = await fetch(api.products, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (r.ok) {
      resetCreateForm();
      await loadProducts();
    } else alert('Create failed');
  }

  els.createProduct.onclick = onCreateProduct;

  els.applyFilters.onclick = loadProducts;
  els.resetFilters.onclick = () => {
    els.search.value = '';
    els.filterCategory.value = '';
    els.filterVendor.value = '';
    els.minPrice.value = '';
    els.maxPrice.value = '';
    els.sort.value = 'created_desc';
    loadProducts();
  };

  (async function init() {
    try {
      await loadCategoriesAndVendors();
      await loadProducts();
    } catch (err) {
      console.warn('Init error', err);
    }
  })();
</script>

<%- include('partials/foot') %>